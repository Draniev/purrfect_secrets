import pytest
from src.secrets.cipherer import Cipherer


@pytest.fixture
def cipherer():
    return Cipherer()


# –¢–µ—Å—Ç 1: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è
def test_encrypt_decrypt_no_password(cipherer):
    original_data = "Test data"
    encrypted_data = cipherer.encrypt(original_data)
    assert encrypted_data != original_data  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã

    decrypted_data, success = cipherer.decrypt(encrypted_data)
    assert success is True
    assert decrypted_data == original_data  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã


# –¢–µ—Å—Ç 2: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º
def test_encrypt_decrypt_with_password(cipherer):
    original_data = "Secret data"
    password = "securepassword123"

    encrypted_data = cipherer.encrypt(original_data, password)
    assert encrypted_data != original_data  # –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ø–∞—Ä–æ–ª—è
    decrypted_data, success = cipherer.decrypt(encrypted_data)
    assert success is False
    assert decrypted_data == ""

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    wrong_password = "wrongpassword"
    decrypted_data, success = cipherer.decrypt(encrypted_data, wrong_password)
    assert success is False
    assert decrypted_data == ""

    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    decrypted_data, success = cipherer.decrypt(encrypted_data, password)
    assert success is True
    assert decrypted_data == original_data


@pytest.mark.parametrize(
    "data, password",
    [
        ("Data with special chars !@#$%^&*()_+-=", "simplepassword"),
        ("–¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º", "–ø–∞—Ä–æ–ª—å"),
        ("Êï∞ÊçÆÂíåÂØÜÁ†Å", "ÂØÜÁ†Å"),  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä–æ–ª–µ
        ("üåü Emoji üåü", "üîë EmojiKey üîë"),  # –≠–º–æ–¥–∑–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä–æ–ª–µ
        ("Normal text", "ÂØÜÁ†Å"),  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–∞—Ä–æ–ª—å –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º
        ("ÂØÜÁ†Å", "Normal password"),  # –ö–∏—Ç–∞–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å
    ],
)
def test_encrypt_decrypt_unicode(cipherer, data, password):
    encrypted_data = cipherer.encrypt(data, password)
    assert encrypted_data != data  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã

    decrypted_data, success = cipherer.decrypt(encrypted_data, password)
    assert success is True
    assert decrypted_data == data  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    wrong_password = password + "wrong"
    decrypted_data, success = cipherer.decrypt(encrypted_data, wrong_password)
    assert success is False
    assert decrypted_data == ""
